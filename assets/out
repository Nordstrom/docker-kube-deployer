#!/bin/bash
set -e
set -o pipefail
exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging
payload=$(mktemp /tmp/kubernetes-resource-payload.XXXXXX)
cat > $payload <&0

source=$1
if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi
cd $source

TOKEN=$(jq -r .source.token < $payload)
KUBE_URL=$(jq -r .source.kube_url < $payload)
jq -r .source.ca_cert < $payload > /tmp/ca.pem

kubectl config set-cluster ci --server=$KUBE_URL --certificate-authority=/tmp/ca.pem --embed-certs
kubectl config set-credentials ci --token=$TOKEN
kubectl config set-context ci --cluster=ci --user=ci
kubectl config use-context ci


CHART=$(jq -r .params.chart < $payload)
RELEASE_NAME=$(jq -r .params.name < $payload)
NAMESPACE=$(jq -r .params.namespace < $payload)
VALUE_FILES=$(jq -r .params.values < $payload)
#APPLY_OPTIONS=$(jq -r '.params.apply_options // ""' < $payload)

echo "Values:"
cat $VALUE_FILES

helm upgrade $RELEASE_NAME $CHART --install --namespace $NAMESPACE --wait -f $VALUE_FILES


jq -n "{}" >&3
